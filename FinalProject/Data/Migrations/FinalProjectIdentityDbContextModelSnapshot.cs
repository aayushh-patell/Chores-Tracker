// <auto-generated />
using System;
using FinalProject.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.Migrations
{
    [DbContext(typeof(FinalProjectIdentityDbContext))]
    partial class FinalProjectIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FinalProject.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Cleaning"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Finance"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Shopping"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Groceries"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Other"
                        });
                });

            modelBuilder.Entity("FinalProject.Models.Chore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Recurrence")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Chores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            Completed = false,
                            DueDate = new DateTime(2023, 3, 20, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Get a Haircut",
                            Recurrence = 3,
                            UserId = "8h7cb3u4-8375-0384-d625-nd73hz5h91gw"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            Completed = false,
                            DueDate = new DateTime(2023, 3, 20, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "Walk the Dog",
                            Recurrence = 1,
                            UserId = "hs73mcu2-9264-0276-h827-js82hcbza04h"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            Completed = false,
                            DueDate = new DateTime(2023, 3, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Buy Groceries",
                            Recurrence = 2,
                            UserId = "92n6dhf7-7254-0265-h265-8ch25zmp6hst"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            Completed = false,
                            DueDate = new DateTime(2023, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dentist Appointment",
                            Recurrence = 4,
                            UserId = "8h7cb3u4-8375-0384-d625-nd73hz5h91gw"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Completed = false,
                            DueDate = new DateTime(2023, 6, 30, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aayush's Birthday Party",
                            Recurrence = 0
                        },
                        new
                        {
                            Id = 6,
                            Completed = false,
                            DueDate = new DateTime(2023, 3, 31, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Buy New Phone",
                            Recurrence = 0,
                            UserId = "hs73mcu2-9264-0276-h827-js82hcbza04h"
                        },
                        new
                        {
                            Id = 7,
                            Completed = false,
                            DueDate = new DateTime(2023, 3, 29, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Do the Laundry",
                            Recurrence = 2,
                            UserId = "8h7cb3u4-8375-0384-d625-nd73hz5h91gw"
                        });
                });

            modelBuilder.Entity("FinalProject.Models.ChoreMonth", b =>
                {
                    b.Property<int>("ChoreId")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChoreId", "Month");

                    b.ToTable("ChoreMonths");

                    b.HasData(
                        new
                        {
                            ChoreId = 4,
                            Month = "April"
                        },
                        new
                        {
                            ChoreId = 4,
                            Month = "October"
                        });
                });

            modelBuilder.Entity("FinalProject.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8h7cb3u4-8375-0384-d625-nd73hz5h91gw",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3c82046-1376-42fb-9b50-43577323c1e6",
                            Email = "alex.gilmer@mitt.ca",
                            EmailConfirmed = true,
                            FirstName = "Alex",
                            LastName = "Gilmer",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEX.GILMER@MITT.CA",
                            NormalizedUserName = "ALEX.GILMER@MITT.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEG4p0sObEod0dbR50BRAQc10plMRVHkR500GTg0GFUxswy5980SwyC7HFJq6pyXMbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d67829b-6972-49ca-942f-379cd5c22f28",
                            TwoFactorEnabled = false,
                            UserName = "alex.gilmer@mitt.ca"
                        },
                        new
                        {
                            Id = "hs73mcu2-9264-0276-h827-js82hcbza04h",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d18b654-6c02-49d4-89f6-3408ba2ab73a",
                            Email = "aayushptl2005@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Aayush",
                            LastName = "Patel",
                            LockoutEnabled = false,
                            NormalizedEmail = "AAYUSHPTL2005@GMAIL.COM",
                            NormalizedUserName = "AAYUSHPTL2005@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDNa8DFw9NB3mkyztJ8zHvwc2L+OsB5vhZLnURbHTARVkegrNXZ/z+9Km/ONKIVwVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8165ab6-3f00-482a-b48f-fa4cb9a071a0",
                            TwoFactorEnabled = false,
                            UserName = "aayushptl2005@gmail.com"
                        },
                        new
                        {
                            Id = "92n6dhf7-7254-0265-h265-8ch25zmp6hst",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2ffc717-5246-4393-af47-cd9d4ead29ae",
                            Email = "chris.macdonald@mitt.ca",
                            EmailConfirmed = true,
                            FirstName = "Chris",
                            LastName = "MacDonald",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRIS.MACDONALD@MITT.CA",
                            NormalizedUserName = "CHRIS.MACDONALD@MITT.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFYIwx8hVeuwZc0iIyX9LvFMBwzu2AW64cbLsMHfn8cNRjx1lgQeLZ6WDVr8jlO/ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3224e71-cbd6-42af-82b8-e9dc22ba7ed4",
                            TwoFactorEnabled = false,
                            UserName = "chris.macdonald@mitt.ca"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinalProject.Models.Chore", b =>
                {
                    b.HasOne("FinalProject.Models.Category", "Category")
                        .WithMany("Chores")
                        .HasForeignKey("CategoryId");

                    b.HasOne("FinalProject.Models.User", "User")
                        .WithMany("Chores")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinalProject.Models.ChoreMonth", b =>
                {
                    b.HasOne("FinalProject.Models.Chore", "Chore")
                        .WithMany("ChoreMonths")
                        .HasForeignKey("ChoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chore");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProject.Models.Category", b =>
                {
                    b.Navigation("Chores");
                });

            modelBuilder.Entity("FinalProject.Models.Chore", b =>
                {
                    b.Navigation("ChoreMonths");
                });

            modelBuilder.Entity("FinalProject.Models.User", b =>
                {
                    b.Navigation("Chores");
                });
#pragma warning restore 612, 618
        }
    }
}
